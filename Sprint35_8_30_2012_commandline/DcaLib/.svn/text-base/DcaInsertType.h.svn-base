// $Header: /CAMCAD/DcaLib/DcaInsertType.h 4     3/23/07 5:19a Kurt Van Ness $

#if !defined(__DcaInsertType_h__)
#define __DcaInsertType_h__

#pragma once

#include "Dca.h"
#include "DcaMask64.h"

//_____________________________________________________________________________
enum InsertTypeTag
{
   insertTypeUnknown             = 0,    // INSERTTYPE_UNKNOWN                0  // this is a graphic, non intellignet insert
   insertTypeVia                 = 1,    // INSERTTYPE_VIA                    1  // this insert is a via, if defined in a Geom, it is a FANOUT VIA
   insertTypePin                 = 2,    // INSERTTYPE_PIN                    2  // the insert.refname must be the pinname
   insertTypePcbComponent        = 3,    // INSERTTYPE_PCBCOMPONENT           3  // the insert.refname must be the component name.
   insertTypeMechanicalComponent = 4,    // INSERTTYPE_MECHCOMPONENT          4  // should appear in PCB BOM's, CCM but is not electrical.
   insertTypeGenericComponent    = 5,    // INSERTTYPE_GENERICCOMPONENT       5  // this is a format, graphic or other.
   insertTypePcb                 = 6,    // INSERTTYPE_PCB                    6
   insertTypeFiducial            = 7,    // INSERTTYPE_FIDUCIAL               7
   insertTypeDrillTool           = 8,    // INSERTTYPE_TOOLING                8  // this is a special drill tool

                                                                                 // testpoint is the same like a testpad, excepct a testpoint looks like a component and a
                                                                                 // testpad looks like a via. Accesspoints and Testprobes are likely to be placed on Testpoints/TestPads.
   insertTypeTestPoint           = 9,    // INSERTTYPE_TESTPOINT              9  // testpoint is defined like a PCBCOMPONENT with netlist etc..
   insertTypeFreePad             = 10,   // INSERTTYPE_FREEPAD                10
   insertTypeSymbol              = 11,   // INSERTTYPE_SYMBOL                 11 // Logic Symbol - Changed from INSERTTYPE_GATE to INSERTTYPE_SYMBOL on 05/02/03
   insertTypePortInstance        = 12,   // INSERTTYPE_PORTINSTANCE           12
   insertTypeDrillHole           = 13,   // INSERTTYPE_DRILLHOLE              13 // free standing drill hole defintions placement. (like a FREEPAD)
   insertTypeMechanicalPin       = 14,   // INSERTTYPE_MECHANICALPIN          14 // pin , but not electrical (i.e. mouting hole on a connector)
   insertTypeTestProbe           = 15,   // INSERTTYPE_TEST_PROBE             15 // testprobe is the external physical probe placement.
                                                                                 // a probe must have a datalink to a feature (compPin or CC Entity).
                                                                                 // the accesspoint is not of interest after a probe is placed.
                                                                                 // -> netname attribute
                                                                                 // DDLINK <- to know from which access_point it came from.

   insertTypeDrillSymbol         = 16,   // INSERTTYPE_DRILLSYMBOL            16
   insertTypeCentroid            = 17,   // INSERTTYPE_CENTROID               17 // 
   insertTypeClearancePad        = 18,   // INSERTTYPE_CLEARPAD               18 // this is the plane pad, used for plane-clear.
   insertTypeThermalPad          = 19,   // INSERTTYPE_RELIEFPAD              19 // this is the thermal pad used to build padstacks
   insertTypeObstacle            = 20,   // INSERTTYPE_OBSTACLE               20 // generic routing obstacle, the graphic_class will determin what type of obstacle this is.
   insertTypeDrcMarker           = 21,   // INSERTTYPE_DRCMARKER              21
   insertTypeTestAccessPoint     = 22,   // INSERTTYPE_TEST_ACCESSPOINT       22 // generated by Test Access Analysis - this is a point which has
                                                                                 // -> netname attribute
                                                                                 // -> TESTPREFERENCE attribute
                                                                                 // DDLINK <- to know where it came from. (comppin or entity)

   insertTypeTestPad             = 23,   // INSERTTYPE_TESTPAD                23 // testpoint is defined like a VIA with ATT_NETNAME
   insertTypeSchematicJunction   = 24,   // INSERTTYPE_SCHEM_JUNCTION         24 // junction point in schematic
   insertTypeGluePoint           = 25,   // INSERTTYPE_GLUEPOINT              25 //
   insertTypeRejectMark          = 26,   // INSERTTYPE_REJECTMARK             26
   insertTypeXout                = 27,   // INSERTTYPE_XOUT                   27
   insertTypeHierarchicalSymbol  = 28,   // INSERTTYPE_HIERARCHYSYMBOL        28 // Schematic symbol that points to an hierarchical sheet
   insertTypeSheetConnector      = 29,   // INSERTTYPE_SHEETCONNECTOR         29
   insertTypeTieDot              = 30,   // INSERTTYPE_TIEDOT                 30
   insertTypeRipper              = 31,   // INSERTTYPE_RIPPER                 31
   insertTypeGround              = 32,   // INSERTTYPE_GROUND                 32
   insertTypeTerminator          = 33,   // INSERTTYPE_TERMINATOR             33
   insertTypeAperture            = 34,   // INSERTTYPE_APERTURE               34
   insertTypeRealPart            = 35,   // INSERTTYPE_REALPART               35
   insertTypePad                 = 36,   // INSERTTYPE_PAD                    36
   insertTypePackage             = 37,   // INSERTTYPE_PACKAGE                37
   insertTypePackagePin          = 38,   // INSERTTYPE_PACKAGEPIN             38
   insertTypeStencilHole         = 39,   // INSERTTYPE_STENCILHOLE            39
   insertTypeComplexDrillHole    = 40,   // INSERTTYPE_COMPLEXEDRILLHOLE      40
   insertTypeCompositeComp       = 41,   // INSERTTYPE_COMPOSITECOMP          41
   insertTypeRouteTarget         = 42,   // INSERTTYPE_ROUTETARGET            42
   insertTypeDie                 = 43,   // INSERTTYPE_DIE                    43
   insertTypeDiePin              = 44,   // INSERTTYPE_DIEPIN                 44
   insertTypeBondPad             = 45,   // INSERTTYPE_BONDPAD                45
   insertTypeBondWire            = 46,   // INSERTTYPE_BONDWIRE               46
   insertTypeUndefined               ,
   insertTypeLowerBound          =  0                         ,
   insertTypeUpperBound          = insertTypeUndefined - 1    ,
   InsertTypeTagMin              = insertTypeUnknown          ,
   InsertTypeTagMax              = insertTypeUpperBound
};

InsertTypeTag intToInsertTypeTag(int insertType);
InsertTypeTag insertDisplayStringToTypeTag(CString insertDisplayString);
CString insertTypeToString(InsertTypeTag insertType);
CString insertTypeToDisplayString(InsertTypeTag insertType);

// When adding a new insert type: 
// 1) update insertTypeToString() in DcaInsertType.cpp
// 2) update insertTypeToDisplayString() in DcaInsertType.cpp
// 3) update insertDisplayStringToTypeTag() in DcaInsertType.cpp

//_____________________________________________________________________________
class CInsertTypeMask : CMask64
{
public:
   CInsertTypeMask();
   virtual ~CInsertTypeMask();
   CInsertTypeMask(const CInsertTypeMask& other);
   CInsertTypeMask(InsertTypeTag insertType);
   CInsertTypeMask(InsertTypeTag insertType1,InsertTypeTag insertType2);
   CInsertTypeMask(InsertTypeTag insertType1,InsertTypeTag insertType2,InsertTypeTag insertType3);
   CInsertTypeMask(InsertTypeTag insertType1,InsertTypeTag insertType2,InsertTypeTag insertType3,InsertTypeTag insertType4);
   CInsertTypeMask(InsertTypeTag insertType1,InsertTypeTag insertType2,InsertTypeTag insertType3,InsertTypeTag insertType4,InsertTypeTag insertType5);
   CInsertTypeMask& operator=(const CInsertTypeMask& other);

   void add(InsertTypeTag insertType)        { CMask64::add((int)insertType); }
   void add(const CInsertTypeMask& other)    { CMask64::add(other); }
   void remove(InsertTypeTag insertType)     { CMask64::remove(insertType); }
   void remove(const CInsertTypeMask& other) { CMask64::remove(other); }

   bool contains(InsertTypeTag insertType) const { return CMask64::contains(insertType); }

protected:
   virtual unsigned __int64 getBitMask(InsertTypeTag insertType) const
      {  return 1ui64 << (insertType + 1); }
};

//_____________________________________________________________________________
class CInsertTypeFilter : public CMask64
{
public:
   void setToDefault();

   CString getSetString(const CString& delimeter=CString(" "));
   void setFromString(const CString& setString,const CString& delimiterList=CString(" "));
};

#endif
