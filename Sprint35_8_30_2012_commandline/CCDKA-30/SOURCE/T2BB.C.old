/* -S -Z -L -T __BBS_MILL__=2 __BBS_TURN__=2 */
/********************************* T2BB.C **********************************/ 
/***************************  2-D Topology *********************************/ 
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/ 
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/ 
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/ 
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/ 
#include <dmldefs.h>
#include <t2bdefs.h>
#include <t2bpriv.h>
#include <t2cdefs.h>
#include <t2ddefs.h>
#ifdef CCDK_DEBUG
EXTERN INT DISPLAY ;
EXTERN INT DIS_LEVEL ;
EXTERN BOOLEAN DIR ;
#endif
#if ( __BBS_MILL__>=2 || __BBS_TURN__>=2 )

STATIC void     t2b_union_pass1 __(( T2_REGION, DML_LIST, DML_LIST )) ;
STATIC void     t2b_common_pass1 __(( T2_REGION, DML_LIST, DML_LIST )) ;
STATIC void     t2b_diff_pass2 __(( T2_REGION, DML_LIST, DML_LIST )) ;
STATIC DML_LIST t2b_2regions __(( T2_REGION DUMMY0 , T2_REGION DUMMY1 , 
            BOOLEAN DUMMY2 , DML_LIST DUMMY3 )) ; 

/*-------------------------------------------------------------------------*/
BBS_PUBLIC DML_LIST t2b_union_rr ( region1, region2, result ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
T2_REGION region1, region2 ;
DML_LIST result ;
{
    T2_REGION copy1, copy2 ;
    copy1 = t2d_copy_region ( region1 ) ;
    copy2 = t2d_copy_region ( region2 ) ;
    t2c_reverse_region ( copy1 ) ;
    t2c_reverse_region ( copy2 ) ;
    result = t2b_2regions ( copy1, copy2, TRUE, result ) ;
    t2d_free_region ( copy1 ) ;
    t2d_free_region ( copy2 ) ;
    RETURN ( result ) ;
}


/*-------------------------------------------------------------------------*/
BBS_PUBLIC DML_LIST t2b_union_rl ( region, region_list, result ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
T2_REGION region ;
DML_LIST region_list ;
DML_LIST result ;
{
    DML_ITEM item ;
    DML_LIST list0, list1 ;
    T2_REGION region1 ;

    list0 = dml_create_list () ;
    list1 = dml_create_list () ;
    dml_append_data ( list0, t2d_copy_region ( region ) ) ;

    DML_WALK_LIST ( region_list, item ) {
        region1 = DML_RECORD(item) ;
        t2b_union_pass1 ( region1, list0, list1 ) ;
#ifdef CCDK_DEBUG
{
    DML_ITEM item ;
    DISPLAY++ ;
    if ( DIS_LEVEL == -1 || DISPLAY <= DIS_LEVEL ) {
        paint_region ( region, 12 ) ;
        paint_region ( region1, 13 ) ;
        getch();
        DML_WALK_LIST ( list0, item ) {
            paint_region ( DML_RECORD(item), 14 ) ;
            getch();
        }
    }
    else
        DISPLAY-- ;
}
#endif
    }

    if ( result == NULL ) 
        result = dml_create_list () ;
    dml_append_list ( result, list0 ) ;
    dml_free_list ( list0 ) ;
    dml_free_list ( list1 ) ;
    RETURN ( result ) ;
}


/*-------------------------------------------------------------------------*/
STATIC void t2b_union_pass1 ( region, list0, list1 ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
T2_REGION region ;
DML_LIST list0, list1 ;
{
    DML_ITEM item ;
    T2_REGION region1 ;

    DML_WALK_LIST ( list0, item ) {
        region1 = DML_RECORD(item) ;
        if ( item == DML_FIRST(list0) ) 
            t2b_union_rr ( region, region1, list1 ) ;
        else
            dml_append_data ( list1, t2d_copy_region ( region1 ) ) ;
#ifdef CCDK_DEBUG
{
    DML_ITEM item ;
    DISPLAY++ ;
    if ( DIS_LEVEL == -1 || DISPLAY <= DIS_LEVEL ) {
        paint_region ( region, 9 ) ;
        paint_region ( region1, 10 ) ;
        getch();
        DML_WALK_LIST ( list1, item ) {
            paint_region ( DML_RECORD(item), 11 ) ;
            getch();
        }
    }
    else
        DISPLAY-- ;
}
#endif
    }
    dml_apply ( list0, ( PF_ACTION ) t2d_free_region ) ;
    dml_clear_list ( list0 ) ;
    dml_append_list ( list0, list1 ) ;
}


/*-------------------------------------------------------------------------*/
//BBS_PUBLIC DML_LIST t2b_union_l ( region_list, result ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
//DML_LIST region_list ;
//DML_LIST result ;
DML_LIST t2b_union_l ( DML_LIST rlist, DML_LIST reslist ) 
/*-------------------------------------------------------------------------*/ 
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/ 
/*!!!!!!!! (C) Copyright 1989 - 1996 Building Block Software, Inc. !!!!!!!*/ 
/*!!!!!!!! All rights reserved !!!!!!!*/ 
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/ 
{ 
	DML_ITEM item0, item1, item2; 
	DML_LIST ulist; 
	T2_REGION r0, r1; 

	ulist = dml_create_list(); 
	
	if ( reslist == NULL ) 
		reslist = dml_create_list(); 

	while ( dml_length ( rlist ) > 1 ) 
	{
//		dml_sort_list ( rlist, ( PF_SORT ) edge_count_key ); 

		item0 = dml_first ( rlist ); 
		r0 = ( T2_REGION ) dml_record ( item0 ); 

		for ( item1 = dml_next ( item0 ); item1 != NULL; item1 = item2 ) 
		{
			item2 = dml_next ( item1 ); 
			r1 = ( T2_REGION ) dml_record ( item1 ); 

			if ( c2a_box_overlap ( T2_REGION_BOX(r0), T2_REGION_BOX(r1) ) == FALSE ) 
				continue; 

			t2b_union_rr ( r0, r1, ulist ); 

			if ( dml_length ( ulist ) > 0 ) 
			{
				if ( dml_length ( ulist ) == 2 ) 
				{
					dml_apply ( ulist, ( PF_ACTION ) t2d_free_region ); 
					dml_clear_list ( ulist ); 
				}
				else 
				{
					dml_remove_item ( rlist, item0 ); 
					dml_remove_item ( rlist, item1 ); 
					
					t2d_free_region ( r0 ); 
					t2d_free_region ( r1 ); 

					item0 = dml_first ( ulist ); 
					r0 = dml_record ( item0 ); 

					dml_insert_after ( rlist, NULL, r0 ); 
					dml_clear_list ( ulist ); 

					break; 
				}
			}
		}

		if ( item1 == NULL ) 
		{
			dml_append_data ( reslist, ( ANY ) r0 ); 
			dml_remove_item ( rlist, item0 ); 
		}
	}
	
	dml_free_list ( ulist ); 
	
	dml_append_list ( reslist, rlist ); 
	
	return ( reslist ); 
} 

/*    DML_LIST list0, list1 ;
    DML_ITEM item ;
    T2_REGION region ;

    list0 = dml_create_list () ;
    list1 = dml_create_list () ;
    DML_WALK_LIST ( region_list, item ) {
        region = DML_RECORD(item) ;
        t2b_union_rl ( region, list0, list1 ) ;
        dml_apply ( list0, ( PF_ACTION ) t2d_free_region ) ;
        dml_clear_list ( list0 ) ;
        dml_append_list ( list0, list1 ) ;
    }
    if ( result == NULL ) 
        result = dml_create_list () ;
    dml_append_list ( result, list0 ) ;
    dml_free_list ( list0 ) ;
    dml_free_list ( list1 ) ;
    RETURN ( result ) ;
}*/


/*-------------------------------------------------------------------------*/
BBS_PUBLIC DML_LIST t2b_common_rr ( region1, region2, result ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
T2_REGION region1, region2 ;
DML_LIST result ;
{
    T2_REGION copy1, copy2 ;
    copy1 = t2d_copy_region ( region1 ) ;
    copy2 = t2d_copy_region ( region2 ) ;
    result = t2b_2regions ( copy1, copy2, FALSE, result ) ;
    t2d_free_region ( copy1 ) ;
    t2d_free_region ( copy2 ) ;
    RETURN ( result ) ;
}


/*-------------------------------------------------------------------------*/
BBS_PUBLIC DML_LIST t2b_common_rl ( region, region_list, result ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
T2_REGION region ;
DML_LIST region_list ;
DML_LIST result ;
{
    DML_ITEM item ;
    DML_LIST list0, list1 ;
    T2_REGION region1 ;

    list0 = dml_create_list () ;
    list1 = dml_create_list () ;
    dml_append_data ( list0, t2d_copy_region ( region ) ) ;

    DML_WALK_LIST ( region_list, item ) {
        region1 = DML_RECORD(item) ;
        t2b_common_pass1 ( region1, list0, list1 ) ;
        if ( dml_length(list0) == 0 ) 
            break ;
    }
#ifdef CCDK_DEBUG
{
    DML_ITEM item ;
    DISPLAY++ ;
    if ( DIS_LEVEL == -1 || DISPLAY <= DIS_LEVEL ) {
        paint_region ( region, 12 ) ;
        paint_region ( region1, 13 ) ;
        getch();
        DML_WALK_LIST ( list0, item ) {
            paint_region ( DML_RECORD(item), 14 ) ;
            getch();
        }
    }
    else
        DISPLAY-- ;
}
#endif
    if ( result == NULL ) 
        result = dml_create_list () ;
    dml_append_list ( result, list0 ) ;
    dml_free_list ( list0 ) ;
    dml_free_list ( list1 ) ;
    RETURN ( result ) ;
}


/*-------------------------------------------------------------------------*/
STATIC void t2b_common_pass1 ( region, list0, list1 ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
T2_REGION region ;
DML_LIST list0, list1 ;
{
    DML_ITEM item ;
    T2_REGION region1 ;

    DML_WALK_LIST ( list0, item ) {
        region1 = DML_RECORD(item) ;
        t2b_common_rr ( region, region1, list1 ) ;
#ifdef CCDK_DEBUG
{
    DML_ITEM item ;
    DISPLAY++ ;
    if ( DIS_LEVEL == -1 || DISPLAY <= DIS_LEVEL ) {
        paint_region ( region, 9 ) ;
        paint_region ( region1, 10 ) ;
        getch();
        DML_WALK_LIST ( list1, item ) {
            paint_region ( DML_RECORD(item), 11 ) ;
            getch();
        }
    }
    else
        DISPLAY-- ;
}
#endif
    }
    dml_apply ( list0, ( PF_ACTION ) t2d_free_region ) ;
    dml_clear_list ( list0 ) ;
    dml_append_list ( list0, list1 ) ;
}


/*-------------------------------------------------------------------------*/
BBS_PUBLIC DML_LIST t2b_common_l ( region_list, result ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
DML_LIST region_list ;
DML_LIST result ;
{
    DML_LIST list0, list1 ;
    DML_ITEM item ;
    T2_REGION region ;

    list0 = dml_create_list () ;
    list1 = dml_create_list () ;
    DML_WALK_LIST ( region_list, item ) {
        region = DML_RECORD(item) ;
        t2b_common_rl ( region, list0, list1 ) ;
        dml_apply ( list0, ( PF_ACTION ) t2d_free_region ) ;
        dml_clear_list ( list0 ) ;
        dml_append_list ( list0, list1 ) ;
        if ( DML_LENGTH(list0) == 0 )
            break ;
    }
    if ( result == NULL ) 
        result = dml_create_list () ;
    dml_append_list ( result, list0 ) ;
    dml_free_list ( list0 ) ;
    dml_free_list ( list1 ) ;
    RETURN ( result ) ;
}


/*-------------------------------------------------------------------------*/
BBS_PUBLIC DML_LIST t2b_diff_rr ( region1, region2, result ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
T2_REGION region1, region2 ;
DML_LIST result ;
{
    T2_REGION copy1, copy2 ;
    copy1 = t2d_copy_region ( region1 ) ;
    copy2 = t2d_copy_region ( region2 ) ;
    t2c_reverse_region ( copy2 ) ;
    result = t2b_2regions ( copy1, copy2, FALSE, result ) ;
    t2d_free_region ( copy1 ) ;
    t2d_free_region ( copy2 ) ;
    RETURN ( result ) ;
}


/*-------------------------------------------------------------------------*/
BBS_PUBLIC DML_LIST t2b_diff_rl ( region, region_list, result ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
T2_REGION region ;
DML_LIST region_list ;
DML_LIST result ;
{
    DML_LIST union_list ;

    union_list = t2b_union_l ( region_list, NULL ) ;
    result = t2b_diff_pass1 ( region, region_list, result ) ;
    dml_destroy_list ( union_list, ( PF_ACTION ) t2d_free_region ) ;
    RETURN ( result ) ;
}


/*-------------------------------------------------------------------------*/
BBS_PUBLIC DML_LIST t2b_diff_loops ( loop, looplist, result ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
T2_LOOP loop ;
DML_LIST looplist ;
DML_LIST result ;
{
    T2_REGION region ;
    DML_LIST region_list ;
    DML_ITEM item ;

    region = t2d_loop_to_region ( loop ) ;
    region_list = dml_create_list () ;
    DML_WALK_LIST ( looplist, item ) 
        dml_append_data ( region_list, 
            t2d_loop_to_region ( DML_RECORD(item) ) ) ;
    result = t2b_diff_rl ( region, region_list, result ) ;
    t2d_clear_region ( region ) ;
    dml_apply ( region_list, ( PF_ACTION ) t2d_clear_region ) ;
    dml_free_list ( region_list ) ;
    RETURN ( result ) ;
}


/*-------------------------------------------------------------------------*/
BBS_PUBLIC DML_LIST t2b_diff_loop_rgns ( loop, region_list, result ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
T2_LOOP loop ;
DML_LIST region_list ;
DML_LIST result ;
{
    T2_REGION region ;

    region = t2d_loop_to_region ( loop ) ;
    result = t2b_diff_rl ( region, region_list, result ) ;
    t2d_clear_region ( region ) ;
    RETURN ( result ) ;
}


/*-------------------------------------------------------------------------*/
BBS_PRIVATE DML_LIST t2b_diff_pass1 ( region, region_list, result ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
T2_REGION region ;
DML_LIST region_list ;
DML_LIST result ;
{
    DML_LIST list0, list1 ;
    DML_ITEM item ;
    T2_REGION region1 ;

#ifdef CCDK_DEBUG
{
    DML_ITEM item ;
    DISPLAY++ ;
    if ( DIS_LEVEL == -1 || DISPLAY <= DIS_LEVEL ) {
        DML_WALK_LIST ( region_list, item ) {
            paint_region ( DML_RECORD(item), 9 ) ;
            getch();
        }
    }
    else
        DISPLAY-- ;
}
#endif
    list0 = dml_create_list () ;
    list1 = dml_create_list () ;
    dml_append_data ( list0, t2d_copy_region ( region ) ) ;

    DML_WALK_LIST ( region_list, item ) {
        region1 = DML_RECORD(item) ;
        t2b_diff_pass2 ( region1, list0, list1 ) ;
    }

    if ( result == NULL ) 
        result = dml_create_list () ;
    dml_append_list ( result, list0 ) ;
    dml_free_list ( list0 ) ;
    dml_free_list ( list1 ) ;
    RETURN ( result ) ;
}


/*-------------------------------------------------------------------------*/
STATIC void t2b_diff_pass2 ( region, list0, list1 ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
T2_REGION region ;
DML_LIST list0, list1 ;
{
    DML_ITEM item ;
    T2_REGION region1 ;

    DML_WALK_LIST ( list0, item ) {
        region1 = DML_RECORD(item) ;
        t2b_diff_rr ( region1, region, list1 ) ;
#ifdef CCDK_DEBUG
{
    DML_ITEM item ;
    DISPLAY++ ;
    if ( DIS_LEVEL == -1 || DISPLAY <= DIS_LEVEL ) {
        paint_region ( region, 9 ) ;
        paint_region ( region1, 10 ) ;
        getch();
        DML_WALK_LIST ( list1, item ) {
            paint_region ( DML_RECORD(item), 11 ) ;
            getch();
        }
    }
    else
        DISPLAY-- ;
}
#endif
    }
    dml_apply ( list0, ( PF_ACTION ) t2d_free_region ) ;
    dml_clear_list ( list0 ) ;
    dml_append_list ( list0, list1 ) ;
}


/*-------------------------------------------------------------------------*/
STATIC DML_LIST t2b_2regions ( region1, region2, rev_res, result ) 
/*-------------------------------------------------------------------------*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!      (C) Copyright 1989 - 1995 Building Block Software   !!!!!!!*/
/*!!!!!!!!                    All rights reserved                   !!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
T2_REGION region1, region2 ;
BOOLEAN rev_res ;
DML_LIST result ;  /* regions */
{
    DML_LIST looplist ;
#ifdef CCDK_DEBUG
    DISPLAY++ ;
    if ( DIS_LEVEL == -1 || DISPLAY <= DIS_LEVEL ) {
        paint_region ( region1, 11 ) ;
        getch();
        paint_region ( region2, 12 ) ;
        getch();
    }
    else
        DISPLAY-- ;
#endif
    t2b_split ( region1, region2 ) ;
    looplist = t2b_traverse ( region1, region2, NULL ) ;
    if ( rev_res ) 
        dml_apply ( looplist, ( PF_ACTION ) t2c_reverse_loop ) ;
    result = t2b_create_regions ( looplist, result ) ;
    dml_destroy_list ( looplist, ( PF_ACTION ) t2d_free_loop ) ;
    RETURN ( result ) ;
}
#endif /* __BBS_MILL__>=2 || __BBS_TURN__>=2 */

