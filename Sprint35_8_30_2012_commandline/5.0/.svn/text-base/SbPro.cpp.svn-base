// $Header: /CAMCAD/4.3/SbPro.cpp 7     8/12/03 7:25p Kurt Van Ness $

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

#include "stdafx.h"
#include "sbpro.h"

// Dispatch interfaces referenced by this interface
#include "SbFont.h"

/////////////////////////////////////////////////////////////////////////////
// CSbpro

IMPLEMENT_DYNCREATE(CSbpro, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CSbpro properties

CString CSbpro::GetAbout()
{
   CString result;
   GetProperty(0x2d, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetAbout(LPCTSTR propVal)
{
   SetProperty(0x2d, VT_BSTR, propVal);
}

short CSbpro::GetActiveSheet()
{
   short result;
   GetProperty(0x1e, VT_I2, (void*)&result);
   return result;
}

void CSbpro::SetActiveSheet(short propVal)
{
   SetProperty(0x1e, VT_I2, propVal);
}

BOOL CSbpro::GetAlwaysSplit()
{
   BOOL result;
   GetProperty(0x1f, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetAlwaysSplit(BOOL propVal)
{
   SetProperty(0x1f, VT_BOOL, propVal);
}

CString CSbpro::GetAttributeName()
{
   CString result;
   GetProperty(0x4a, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetAttributeName(LPCTSTR propVal)
{
   SetProperty(0x4a, VT_BSTR, propVal);
}

CString CSbpro::GetBlockedKeywords()
{
   CString result;
   GetProperty(0x39, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetBlockedKeywords(LPCTSTR propVal)
{
   SetProperty(0x39, VT_BSTR, propVal);
}

VARIANT CSbpro::GetBreakPoints()
{
   VARIANT result;
   GetProperty(0x3d, VT_VARIANT, (void*)&result);
   return result;
}

void CSbpro::SetBreakPoints(const VARIANT& propVal)
{
   SetProperty(0x3d, VT_VARIANT, &propVal);
}

BOOL CSbpro::GetChanged()
{
   BOOL result;
   GetProperty(0x7, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetChanged(BOOL propVal)
{
   SetProperty(0x7, VT_BOOL, propVal);
}

CString CSbpro::GetCode()
{
   CString result;
   GetProperty(0x8, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetCode(LPCTSTR propVal)
{
   SetProperty(0x8, VT_BSTR, propVal);
}

short CSbpro::GetDebugHeight()
{
   short result;
   GetProperty(0x42, VT_I2, (void*)&result);
   return result;
}

void CSbpro::SetDebugHeight(short propVal)
{
   SetProperty(0x42, VT_I2, propVal);
}

CString CSbpro::GetDefaultDataType()
{
   CString result;
   GetProperty(0x40, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetDefaultDataType(LPCTSTR propVal)
{
   SetProperty(0x40, VT_BSTR, propVal);
}

CString CSbpro::GetDefaultMacroName()
{
   CString result;
   GetProperty(0x3a, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetDefaultMacroName(LPCTSTR propVal)
{
   SetProperty(0x3a, VT_BSTR, propVal);
}

CString CSbpro::GetDefaultObjectName()
{
   CString result;
   GetProperty(0x3b, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetDefaultObjectName(LPCTSTR propVal)
{
   SetProperty(0x3b, VT_BSTR, propVal);
}

BOOL CSbpro::GetEditTools()
{
   BOOL result;
   GetProperty(0x9, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetEditTools(BOOL propVal)
{
   SetProperty(0x9, VT_BOOL, propVal);
}

CString CSbpro::GetErrorFile()
{
   CString result;
   GetProperty(0xa, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetErrorFile(LPCTSTR propVal)
{
   SetProperty(0xa, VT_BSTR, propVal);
}

long CSbpro::GetErrorHelpContext()
{
   long result;
   GetProperty(0x45, VT_I4, (void*)&result);
   return result;
}

void CSbpro::SetErrorHelpContext(long propVal)
{
   SetProperty(0x45, VT_I4, propVal);
}

CString CSbpro::GetErrorHelpFile()
{
   CString result;
   GetProperty(0x46, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetErrorHelpFile(LPCTSTR propVal)
{
   SetProperty(0x46, VT_BSTR, propVal);
}

short CSbpro::GetErrorLine()
{
   short result;
   GetProperty(0xb, VT_I2, (void*)&result);
   return result;
}

void CSbpro::SetErrorLine(short propVal)
{
   SetProperty(0xb, VT_I2, propVal);
}

long CSbpro::GetErrorNumber()
{
   long result;
   GetProperty(0x47, VT_I4, (void*)&result);
   return result;
}

void CSbpro::SetErrorNumber(long propVal)
{
   SetProperty(0x47, VT_I4, propVal);
}

short CSbpro::GetErrorOffset()
{
   short result;
   GetProperty(0xc, VT_I2, (void*)&result);
   return result;
}

void CSbpro::SetErrorOffset(short propVal)
{
   SetProperty(0xc, VT_I2, propVal);
}

CString CSbpro::GetErrorSource()
{
   CString result;
   GetProperty(0x48, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetErrorSource(LPCTSTR propVal)
{
   SetProperty(0x48, VT_BSTR, propVal);
}

CString CSbpro::GetErrorText()
{
   CString result;
   GetProperty(0xd, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetErrorText(LPCTSTR propVal)
{
   SetProperty(0xd, VT_BSTR, propVal);
}

BOOL CSbpro::GetEventMode()
{
   BOOL result;
   GetProperty(0x20, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetEventMode(BOOL propVal)
{
   SetProperty(0x20, VT_BOOL, propVal);
}

BOOL CSbpro::GetFileChangeDir()
{
   BOOL result;
   GetProperty(0x21, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetFileChangeDir(BOOL propVal)
{
   SetProperty(0x21, VT_BOOL, propVal);
}

CString CSbpro::GetFileDesc()
{
   CString result;
   GetProperty(0xe, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetFileDesc(LPCTSTR propVal)
{
   SetProperty(0xe, VT_BSTR, propVal);
}

CString CSbpro::GetFileExt()
{
   CString result;
   GetProperty(0xf, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetFileExt(LPCTSTR propVal)
{
   SetProperty(0xf, VT_BSTR, propVal);
}

BOOL CSbpro::GetFileMenuVisible()
{
   BOOL result;
   GetProperty(0x1, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetFileMenuVisible(BOOL propVal)
{
   SetProperty(0x1, VT_BOOL, propVal);
}

CString CSbpro::GetFileName()
{
   CString result;
   GetProperty(0x10, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetFileName(LPCTSTR propVal)
{
   SetProperty(0x10, VT_BSTR, propVal);
}

BOOL CSbpro::GetFileTools()
{
   BOOL result;
   GetProperty(0x11, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetFileTools(BOOL propVal)
{
   SetProperty(0x11, VT_BOOL, propVal);
}

BOOL CSbpro::GetFullPopupMenu()
{
   BOOL result;
   GetProperty(0x22, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetFullPopupMenu(BOOL propVal)
{
   SetProperty(0x22, VT_BOOL, propVal);
}

short CSbpro::GetHeaderLineCount()
{
   short result;
   GetProperty(0x4b, VT_I2, (void*)&result);
   return result;
}

void CSbpro::SetHeaderLineCount(short propVal)
{
   SetProperty(0x4b, VT_I2, propVal);
}

BOOL CSbpro::GetHelpMenuVisible()
{
   BOOL result;
   GetProperty(0x43, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetHelpMenuVisible(BOOL propVal)
{
   SetProperty(0x43, VT_BOOL, propVal);
}

CString CSbpro::GetHiddenCode()
{
   CString result;
   GetProperty(0x12, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetHiddenCode(LPCTSTR propVal)
{
   SetProperty(0x12, VT_BSTR, propVal);
}

unsigned long CSbpro::GetHighlightBuiltin()
{
   unsigned long result;
   GetProperty(0x4, VT_I4, (void*)&result);
   return result;
}

void CSbpro::SetHighlightBuiltin(unsigned long propVal)
{
   SetProperty(0x4, VT_I4, propVal);
}

unsigned long CSbpro::GetHighlightComment()
{
   unsigned long result;
   GetProperty(0x5, VT_I4, (void*)&result);
   return result;
}

void CSbpro::SetHighlightComment(unsigned long propVal)
{
   SetProperty(0x5, VT_I4, propVal);
}

unsigned long CSbpro::GetHighlightError()
{
   unsigned long result;
   GetProperty(0x6, VT_I4, (void*)&result);
   return result;
}

void CSbpro::SetHighlightError(unsigned long propVal)
{
   SetProperty(0x6, VT_I4, propVal);
}

unsigned long CSbpro::GetHighlightExtension()
{
   unsigned long result;
   GetProperty(0x3, VT_I4, (void*)&result);
   return result;
}

void CSbpro::SetHighlightExtension(unsigned long propVal)
{
   SetProperty(0x3, VT_I4, propVal);
}

unsigned long CSbpro::GetHighlightReserved()
{
   unsigned long result;
   GetProperty(0x2, VT_I4, (void*)&result);
   return result;
}

void CSbpro::SetHighlightReserved(unsigned long propVal)
{
   SetProperty(0x2, VT_I4, propVal);
}

BOOL CSbpro::GetLocked()
{
   BOOL result;
   GetProperty(0x23, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetLocked(BOOL propVal)
{
   SetProperty(0x23, VT_BOOL, propVal);
}

long CSbpro::GetModuleKind()
{
   long result;
   GetProperty(0x4c, VT_I4, (void*)&result);
   return result;
}

void CSbpro::SetModuleKind(long propVal)
{
   SetProperty(0x4c, VT_I4, propVal);
}

BOOL CSbpro::GetMultiSheet()
{
   BOOL result;
   GetProperty(0x24, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetMultiSheet(BOOL propVal)
{
   SetProperty(0x24, VT_BOOL, propVal);
}

BOOL CSbpro::GetNegotiateMenus()
{
   BOOL result;
   GetProperty(0x38, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetNegotiateMenus(BOOL propVal)
{
   SetProperty(0x38, VT_BOOL, propVal);
}

BOOL CSbpro::GetPause()
{
   BOOL result;
   GetProperty(0x13, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetPause(BOOL propVal)
{
   SetProperty(0x13, VT_BOOL, propVal);
}

long CSbpro::GetProcDisplayMode()
{
   long result;
   GetProperty(0x3c, VT_I4, (void*)&result);
   return result;
}

void CSbpro::SetProcDisplayMode(long propVal)
{
   SetProperty(0x3c, VT_I4, propVal);
}

BOOL CSbpro::GetRun()
{
   BOOL result;
   GetProperty(0x14, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetRun(BOOL propVal)
{
   SetProperty(0x14, VT_BOOL, propVal);
}

short CSbpro::GetSheetCount()
{
   short result;
   GetProperty(0x25, VT_I2, (void*)&result);
   return result;
}

void CSbpro::SetSheetCount(short propVal)
{
   SetProperty(0x25, VT_I2, propVal);
}

BOOL CSbpro::GetStatusVisible()
{
   BOOL result;
   GetProperty(0x15, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetStatusVisible(BOOL propVal)
{
   SetProperty(0x15, VT_BOOL, propVal);
}

BOOL CSbpro::GetSyntaxCheck()
{
   BOOL result;
   GetProperty(0x17, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetSyntaxCheck(BOOL propVal)
{
   SetProperty(0x17, VT_BOOL, propVal);
}

BOOL CSbpro::GetToolbarVisible()
{
   BOOL result;
   GetProperty(0x16, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetToolbarVisible(BOOL propVal)
{
   SetProperty(0x16, VT_BOOL, propVal);
}

long CSbpro::GetSelLength()
{
   long result;
   GetProperty(0x31, VT_I4, (void*)&result);
   return result;
}

void CSbpro::SetSelLength(long propVal)
{
   SetProperty(0x31, VT_I4, propVal);
}

long CSbpro::GetSelStart()
{
   long result;
   GetProperty(0x32, VT_I4, (void*)&result);
   return result;
}

void CSbpro::SetSelStart(long propVal)
{
   SetProperty(0x32, VT_I4, propVal);
}

CString CSbpro::GetSelText()
{
   CString result;
   GetProperty(0x33, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetSelText(LPCTSTR propVal)
{
   SetProperty(0x33, VT_BSTR, propVal);
}

unsigned long CSbpro::GetHighlightBreak()
{
   unsigned long result;
   GetProperty(0x4f, VT_I4, (void*)&result);
   return result;
}

void CSbpro::SetHighlightBreak(unsigned long propVal)
{
   SetProperty(0x4f, VT_I4, propVal);
}

unsigned long CSbpro::GetHighlightExec()
{
   unsigned long result;
   GetProperty(0x50, VT_I4, (void*)&result);
   return result;
}

void CSbpro::SetHighlightExec(unsigned long propVal)
{
   SetProperty(0x50, VT_I4, propVal);
}

BOOL CSbpro::GetTabAsSpaces()
{
   BOOL result;
   GetProperty(0x51, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetTabAsSpaces(BOOL propVal)
{
   SetProperty(0x51, VT_BOOL, propVal);
}

short CSbpro::GetTabWidth()
{
   short result;
   GetProperty(0x52, VT_I2, (void*)&result);
   return result;
}

void CSbpro::SetTabWidth(short propVal)
{
   SetProperty(0x52, VT_I2, propVal);
}

CString CSbpro::GetText()
{
   CString result;
   GetProperty(0x53, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetText(LPCTSTR propVal)
{
   SetProperty(0x53, VT_BSTR, propVal);
}

CString CSbpro::Get_Caption()
{
   CString result;
   GetProperty(0x0, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::Set_Caption(LPCTSTR propVal)
{
   SetProperty(0x0, VT_BSTR, propVal);
}

short CSbpro::GetBorderStyle()
{
   short result;
   GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
   return result;
}

void CSbpro::SetBorderStyle(short propVal)
{
   SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

CString CSbpro::GetCaption()
{
   CString result;
   GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
   return result;
}

void CSbpro::SetCaption(LPCTSTR propVal)
{
   SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

BOOL CSbpro::GetEnabled()
{
   BOOL result;
   GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
   return result;
}

void CSbpro::SetEnabled(BOOL propVal)
{
   SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

COleFont CSbpro::GetFont()
{
   LPDISPATCH pDispatch;
   GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
   return COleFont(pDispatch);
}

void CSbpro::SetFont(LPDISPATCH propVal)
{
   SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

OLE_HANDLE CSbpro::GetHWnd()
{
   OLE_HANDLE result;
   GetProperty(DISPID_HWND, VT_I4, (void*)&result);
   return result;
}

void CSbpro::SetHWnd(OLE_HANDLE propVal)
{
   SetProperty(DISPID_HWND, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CSbpro operations

CString CSbpro::GetEvaluate(LPCTSTR Expression)
{
   CString result;
   static BYTE parms[] =
      VTS_BSTR;
   InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
      Expression);
   return result;
}

void CSbpro::SetEvaluate(LPCTSTR Expression, LPCTSTR lpszNewValue)
{
   static BYTE parms[] =
      VTS_BSTR VTS_BSTR;
   InvokeHelper(0x1d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
       Expression, lpszNewValue);
}

BOOL CSbpro::AddExtension(LPCTSTR Prefix, LPDISPATCH Ext)
{
   BOOL result;
   static BYTE parms[] =
      VTS_BSTR VTS_DISPATCH;
   InvokeHelper(0x18, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
      Prefix, Ext);
   return result;
}

BOOL CSbpro::CloseSheet(short Index)
{
   BOOL result;
   static BYTE parms[] =
      VTS_I2;
   InvokeHelper(0x35, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
      Index);
   return result;
}

LPDISPATCH CSbpro::CreateHandler(LPCTSTR Prototype)
{
   LPDISPATCH result;
   static BYTE parms[] =
      VTS_BSTR;
   InvokeHelper(0x26, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
      Prototype);
   return result;
}

LPDISPATCH CSbpro::CreateHandlers(LPCTSTR Prefix, LPDISPATCH EventObj)
{
   LPDISPATCH result;
   static BYTE parms[] =
      VTS_BSTR VTS_DISPATCH;
   InvokeHelper(0x34, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
      Prefix, EventObj);
   return result;
}

BOOL CSbpro::Disconnect()
{
   BOOL result;
   InvokeHelper(0x27, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
   return result;
}

BOOL CSbpro::ExecuteMenuCommand(short CmdId)
{
   BOOL result;
   static BYTE parms[] =
      VTS_I2;
   InvokeHelper(0x1c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
      CmdId);
   return result;
}

void CSbpro::FindOrCreateProc(LPCTSTR ProcName)
{
   static BYTE parms[] =
      VTS_BSTR;
   InvokeHelper(0x36, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
       ProcName);
}

short CSbpro::FindSheet(LPCTSTR FileName)
{
   short result;
   static BYTE parms[] =
      VTS_BSTR;
   InvokeHelper(0x2e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
      FileName);
   return result;
}

long CSbpro::IndexFromLine(short Line)
{
   long result;
   static BYTE parms[] =
      VTS_I2;
   InvokeHelper(0x4d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
      Line);
   return result;
}

BOOL CSbpro::IsMenuCommandChecked(short CmdId)
{
   BOOL result;
   static BYTE parms[] =
      VTS_I2;
   InvokeHelper(0x3e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
      CmdId);
   return result;
}

BOOL CSbpro::IsMenuCommandEnabled(short CmdId)
{
   BOOL result;
   static BYTE parms[] =
      VTS_I2;
   InvokeHelper(0x1b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
      CmdId);
   return result;
}

BOOL CSbpro::IsModuleLoaded(LPCTSTR FileName)
{
   BOOL result;
   static BYTE parms[] =
      VTS_BSTR;
   InvokeHelper(0x2f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
      FileName);
   return result;
}

short CSbpro::LineFromIndex(long Index)
{
   short result;
   static BYTE parms[] =
      VTS_I4;
   InvokeHelper(0x4e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
      Index);
   return result;
}

BOOL CSbpro::LoadModule(LPCTSTR FileName)
{
   BOOL result;
   static BYTE parms[] =
      VTS_BSTR;
   InvokeHelper(0x28, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
      FileName);
   return result;
}

CString CSbpro::MacroCaption(LPCTSTR FileName)
{
   CString result;
   static BYTE parms[] =
      VTS_BSTR;
   InvokeHelper(0x3f, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
      FileName);
   return result;
}

LPDISPATCH CSbpro::ModuleInstance(LPCTSTR FileName, BOOL New)
{
   LPDISPATCH result;
   static BYTE parms[] =
      VTS_BSTR VTS_BOOL;
   InvokeHelper(0x37, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
      FileName, New);
   return result;
}

BOOL CSbpro::RemoveExtensions(LPCTSTR FileName)
{
   BOOL result;
   static BYTE parms[] =
      VTS_BSTR;
   InvokeHelper(0x30, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
      FileName);
   return result;
}

BOOL CSbpro::ReportError(LPDISPATCH Err)
{
   BOOL result;
   static BYTE parms[] =
      VTS_DISPATCH;
   InvokeHelper(0x29, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
      Err);
   return result;
}

void CSbpro::RunFile(LPCTSTR FileName)
{
   static BYTE parms[] =
      VTS_BSTR;
   InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
       FileName);
}

void CSbpro::RunThis(LPCTSTR Code)
{
   static BYTE parms[] =
      VTS_BSTR;
   InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
       Code);
}

BOOL CSbpro::SelectSheet(short Index)
{
   BOOL result;
   static BYTE parms[] =
      VTS_I2;
   InvokeHelper(0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
      Index);
   return result;
}

void CSbpro::SetDialogIdle(LPDISPATCH IdleObject)
{
   static BYTE parms[] =
      VTS_DISPATCH;
   InvokeHelper(0x49, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
       IdleObject);
}

short CSbpro::Shutdown()
{
   short result;
   InvokeHelper(0x2b, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
   return result;
}

void CSbpro::Trace(short Categories)
{
   static BYTE parms[] =
      VTS_I2;
   InvokeHelper(0x44, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
       Categories);
}

BOOL CSbpro::UnloadModule(LPCTSTR FileName)
{
   BOOL result;
   static BYTE parms[] =
      VTS_BSTR;
   InvokeHelper(0x2c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
      FileName);
   return result;
}

void CSbpro::AboutBox()
{
   InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
