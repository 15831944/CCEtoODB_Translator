// $Header: /CAMCAD/4.5/read_wrt/CdiLib.cpp 9     1/27/05 7:43p Kurt Van Ness $

/****************************************************************************
*     Output for CDI-Files
*/

#include "StdAfx.h"
#include "General.h"
#include <stdio.h>
#include <math.h>
#include "geomlib.h"

static FILE    *OFP;       /*Output Filepointer*/
static int     cur_level;
static char    cur_type = 'F';  // B = BOARD
                                // else FIGURES
static void    init();
static void    deinit();

static long    polycnt = 0;
static int     board_written  = FALSE;

//--------------------------------------------------------------------------
void init()
{
   polycnt = 0;
   cur_type = 'F';
   cur_level = 0;
}

void deinit()
{
}

//
// Layer names can be Cxxxx[space]number
//                    Bxxxx
//                otherwise
//
void wCDI_Graph_Level(const char *l)
{
   cur_type = 'F';

   if (l[0] == 'B' || l[0] == 'B' || l[0] == '0')
      cur_type = 'B';

   // here clean level
   while (l && !isdigit(l[0]))
      l++;

   if (strlen(l))
      cur_level = atoi(l);

   switch (cur_type)
   {
      case 'B':
         cur_level = 0;
      break;
      default:
         if (cur_level < 17)  cur_level = 17;
         if (cur_level > 33)  cur_level = 33;
      break;
   }
   return ;
}

int wCDI_Graph_Init()
{
   init();        /*initialize the Memory for the Layers ...*/
   return 1;
}

void wCDI_Graph_File_Open( FILE *file, char *extra_header_info )
{
   OFP=file;

   fprintf(OFP,".REM CADSTAR PCB LAYOUT\n");
   fprintf(OFP,".REM CDI file generated by CAMCAD\n\n");
   fprintf(OFP,".CSP 23\n\n");
   fprintf(OFP,".IFL\n");
   if (extra_header_info)
      fprintf(OFP,"%s.IND\n",extra_header_info);
   fprintf(OFP,"/.CPI\n");
   fprintf(OFP,".EOD\n\n");
   fprintf(OFP,".PCB\n");
   fprintf(OFP,".IMP\n\n");

   return;
}

void wCDI_Graph_File_Close(double xmin, double ymin, double xmax, double ymax)
{
   // here write a board outline - so that ZOOM window on CADSTAR works

   if (!board_written)
   {
      if (xmin < 0)  xmin = 0;
      if (ymin < 0)  ymin = 0;
      if (xmax > 16) xmax = 16;
      if (ymax > 16) ymax = 16;

      fprintf(OFP,".BOA\n");
      fprintf(OFP,"/ %02.3lf %02.3lf\n",xmin,ymin);
      fprintf(OFP," %02.3lf %02.3lf\n",xmax,ymin);
      fprintf(OFP," %02.3lf %02.3lf\n",xmax,ymax);
      fprintf(OFP," %02.3lf %02.3lf\n",xmin,ymax);
      fprintf(OFP," %02.3lf %02.3lf\n",xmin,ymin);
      fprintf(OFP,"\n");
   }
   fprintf(OFP,".EOD\n");
   deinit();      /*deinitialize the Memory for the Layers ...*/
}

void wCDI_Graph_Circle( double center_x, double center_y, double radius, int widthcode )
{
   double x,y, xe;

   x = center_x - radius;
   y = center_y;
   xe = center_x + radius;

   switch (cur_type)
   {
      case 'B':
         fprintf(OFP,".BOA\n");
         fprintf(OFP,"/ %02.3lf %02.3lf\n %02.3lf %02.3lf 1\n %02.3lf %02.3lf 1\n",
               x,y,xe,y,x,y);
         board_written = TRUE;
      break;
      default:
         fprintf(OFP,".FIG\n");
         fprintf(OFP,".COD %d\n",widthcode);
         fprintf(OFP,"/ %02.3lf %02.3lf\n %02.3lf %02.3lf 1\n %02.3lf %02.3lf 1 L %d\n",
               x,y,xe,y,x,y,cur_level);
      break;
   }

   return;
}

void wCDI_Graph_Arc( double center_x, double center_y, double radius,
                 double startangle, double deltaangle,  int widthcode )
{
   double x,y, xe,ye;
   int    direction;

   x = center_x + radius * cos (startangle);
   y = center_y + radius * sin (startangle);
   xe = center_x + radius * cos (startangle+deltaangle);
   ye = center_y + radius * sin (startangle+deltaangle);

   if (deltaangle < 0)
      direction = 0; /* clock */
   else
      direction = 1; /* counter */

   switch (cur_type)
   {
      case 'B':
         fprintf(OFP,".BOA\n");
         fprintf(OFP,"/ %02.3lf %02.3lf\n %02.3lf %02.3lf %d %02.3lf %02.3lf\n",
               x,y,xe,ye,direction,center_x,center_y);
         board_written = TRUE;
      break;
      default:
         fprintf(OFP,".FIG\n");
         fprintf(OFP,".COD %d\n",widthcode);
         fprintf(OFP,"/ %02.3lf %02.3lf\n %02.3lf %02.3lf %d %02.3lf %02.3lf L %d\n",
               x,y,xe,ye,direction,center_x,center_y,cur_level);
      break;
   }

   return;
}

/*****************************************************************************
* wCDI_Graph_Line
*/
void wCDI_Graph_Line( double x1, double y1, double x2, double y2, int widthcode )
{
   switch (cur_type)
   {
      case 'B':
         fprintf(OFP,".BOA\n");
         fprintf(OFP,"/ %02.3lf %02.3lf\n",x1,y1);
         fprintf(OFP," %02.3lf %02.3lf\n",x2,y2);
         board_written = TRUE;
      break;
      default:
         fprintf(OFP,".FIG\n");
         fprintf(OFP,".COD %d\n",widthcode);
         fprintf(OFP,"/ %02.3lf %02.3lf\n",x1,y1);
         fprintf(OFP," %02.3lf %02.3lf L %d\n",x2,y2,cur_level);
      break;
   }

   return;
}

/*****************************************************************************
*
*/
void wCDI_Graph_Text( char *text, double x, double y, int code,
       double textheight,  // needed to adjust mirrored text.
       double angle, int mirror )
{
   double a = RadToDeg(angle);
   int   trot = round(a) / 90;   // 0..360

   if (strlen(text) == 0)  return;

   if (cur_level < 17)
      fprintf(OFP,".TEX\n");
   else
      fprintf(OFP,".DTX\n");

   if (mirror)
   {
      switch (trot)
      {
         case 3:
            y = y + strlen(text) * textheight;
         break;
         case 2:
            x = x + strlen(text) * textheight;
         break;
         case 1:
            y = y - strlen(text) * textheight;
         break;
         case 0:
            x = x - strlen(text) * textheight;
         break;
      }
   }

   fprintf(OFP,".COD %d\n",code);
   fprintf(OFP,"%s\n",text);
   // layer 0,1,2,3 orient mirror 0,1 fixec 0,1 x y
   fprintf(OFP,"%d %d %d 0 %02.3lf %02.3lf\n",
      cur_level,trot,(mirror)?1:0,x,y);

   return;
}

void wCDI_Graph_Polyline( Point2 *coordinates, int cnt, int filled, int widthcode )
{
   int    count;
   double da;
   int    direction;
   
   switch (cur_type)
   {
      case 'B':
         fprintf(OFP,".BOA\n");
         fprintf(OFP,"/ %02.3lf %02.3lf\n",coordinates[0].x,coordinates[0].y);

         for (count=1;count<cnt;count++)
         {
            da = atan(coordinates[count-1].bulge) * 4;

            if (fabs(da) < SMALLNUMBER)
            {
               fprintf(OFP," %02.3lf %02.3lf\n",coordinates[count].x,coordinates[count].y);
            }
            else
            {
               double cx,cy,r,sa;
               ArcPoint2Angle(coordinates[count-1].x,coordinates[count-1].y,
                              coordinates[count].x,coordinates[count].y,
                              da,&cx,&cy,&r,&sa);

               if (da < 0)
                  direction = 0; // clock 
               else
                  direction = 1; // counter 
               fprintf(OFP," %02.3lf %02.3lf %d %02.3lf %02.3lf\n",
                  coordinates[count].x,coordinates[count].y,direction,cx,cy);
            }
         }
         board_written = TRUE;
      break;
      default:
         fprintf(OFP,".FIG\n");
         fprintf(OFP,".COD %d\n",widthcode);
         fprintf(OFP,"/ %02.3lf %02.3lf",coordinates[0].x,coordinates[0].y);
         for (count=1;count<cnt;count++)
         {
            da = atan(coordinates[count-1].bulge) * 4;

            if (fabs(da) < SMALLNUMBER)
            {
               fprintf(OFP,"\n %02.3lf %02.3lf",coordinates[count].x,coordinates[count].y);
            }
            else
            {
               double cx,cy,r,sa;
               ArcPoint2Angle(coordinates[count-1].x,coordinates[count-1].y,
                              coordinates[count].x,coordinates[count].y,
                              da,&cx,&cy,&r,&sa);

               if (da < 0)
                  direction = 0; // clock 
               else
                  direction = 1; // counter 
               fprintf(OFP,"\n %02.3lf %02.3lf %d %02.3lf %02.3lf",
                  coordinates[count].x,coordinates[count].y,direction,cx,cy);
            }
         }

         //fprintf(OFP," %02.3lf %02.3lf ",coordinates[count].x,coordinates[count].y);
         fprintf(OFP," L %d",cur_level);

         if (filled)
            fprintf(OFP," C");

         fprintf(OFP,"\n");
      break;
   }
   return;
}

// end CDILIB.C

